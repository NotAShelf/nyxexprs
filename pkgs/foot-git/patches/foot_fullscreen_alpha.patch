From c22ecce826b4123e453249303e2b4f5b6aacf722 Mon Sep 17 00:00:00 2001
From: Fazzi <faaris.ansari@proton.me>
Date: Fri, 18 Apr 2025 21:15:19 +0100
Subject: [PATCH] config: add transparent_fullscreen option

---
 config.c  | 5 +++++
 config.h  | 2 ++
 render.c  | 8 +++++---
 wayland.c | 2 +-
 4 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/config.c b/config.c
index 4449d9c2..51221eb1 100644
--- a/config.c
+++ b/config.c
@@ -1122,6 +1122,10 @@ parse_section_main(struct context *ctx)
     else if (streq(key, "uppercase-regex-insert"))
         return value_to_bool(ctx, &conf->uppercase_regex_insert);
 
+    else if (streq(key, "transparent-fullscreen")) {
+        return value_to_bool(ctx, &conf->transparent_fullscreen);
+    }
+
     else {
         LOG_CONTEXTUAL_ERR("not a valid option: %s", key);
         return false;
@@ -3431,6 +3435,7 @@ config_load(struct config *conf, const char *conf_path,
             },
             .multiplier = 3.,
         },
+        .transparent_fullscreen = false,
         .colors = {
             .fg = default_foreground,
             .bg = default_background,
diff --git a/config.h b/config.h
index 37b3259f..69db3ec6 100644
--- a/config.h
+++ b/config.h
@@ -250,6 +250,8 @@ struct config {
 
     enum { STARTUP_WINDOWED, STARTUP_MAXIMIZED, STARTUP_FULLSCREEN } startup_mode;
 
+    bool transparent_fullscreen;
+
     bool dpi_aware;
     bool gamma_correct;
     bool uppercase_regex_insert;
diff --git a/render.c b/render.c
index 1d0f08af..f3bc8d34 100644
--- a/render.c
+++ b/render.c
@@ -775,7 +775,8 @@ render_cell(struct terminal *term, pixman_image_t *pix,
             _bg = swap;
         }
 
-        else if (!term->window->is_fullscreen && term->colors.alpha != 0xffff) {
+        else if ((!term->window->is_fullscreen || term->conf->transparent_fullscreen)
+            && term->colors.alpha != 0xffff) {
             switch (term->conf->colors.alpha_mode) {
             case ALPHA_MODE_DEFAULT: {
                 if (cell->attrs.bg_src == COLOR_DEFAULT) {
@@ -1241,7 +1242,7 @@ render_margin(struct terminal *term, struct buffer *buf,
     const uint32_t _bg = !term->reverse ? term->colors.bg : term->colors.fg;
     uint16_t alpha = term->colors.alpha;
 
-    if (term->window->is_fullscreen) {
+    if (term->window->is_fullscreen && !term->conf->transparent_fullscreen) {
         /* Disable alpha in fullscreen - see render_cell() for details */
         alpha = 0xffff;
     }
@@ -3336,7 +3337,8 @@ grid_render(struct terminal *term)
     xassert(term->height > 0);
 
     struct buffer_chain *chain = term->render.chains.grid;
-    bool use_alpha = !term->window->is_fullscreen &&
+    bool use_alpha = (!term->window->is_fullscreen ||
+                     term->conf->transparent_fullscreen) &&
                      term->colors.alpha != 0xffff;
     struct buffer *buf = shm_get_buffer(
         chain, term->width, term->height, use_alpha);
diff --git a/wayland.c b/wayland.c
index bac087fb..c425819d 100644
--- a/wayland.c
+++ b/wayland.c
@@ -2421,7 +2421,7 @@ wayl_win_alpha_changed(struct wl_window *win)
      * When fullscreened, transparency is disabled (see render.c).
      * Update the opaque region to match.
      */
-    bool is_opaque = term->colors.alpha == 0xffff || win->is_fullscreen;
+    bool is_opaque = term->colors.alpha == 0xffff || (win->is_fullscreen && !term->conf->transparent_fullscreen);
 
     if (is_opaque) {
         struct wl_region *region = wl_compositor_create_region(
-- 
2.47.3

